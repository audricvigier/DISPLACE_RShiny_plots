plotList=list()
i=0
for(dataset in effortMaps){
i=i+1
if(scale=="Node"){
plotList[[i]]=as_grob(getmapEffortNodeAll(dataset$VesselVmsLikeCond,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
if(scale=="ICES rectangle"){
plotList[[i]]=as_grob(getmapEffortICESAll(dataset$polygonsICES,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
if(scale=="RTI rectangle"){
plotList[[i]]=as_grob(getmapEffortRTIAll(dataset$polygonsRTI,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
mapsOnAgridBiomass = function(biomassMaps,scale,popNum,monthNum,scenames){
# scale="Node" #input$selmap.scale
# monthNum=2# input$selmap.month
# metierNum=NA #metierNum
# scenames=c("A","B")
plotList=list()
i=0
for(dataset in biomassMaps){
i=i+1
if(scale=="Node"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMap,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="Node"))
}
if(scale=="ICES rectangle"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMapICES,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="ICES rectangle"))
}
if(scale=="RTI rectangle"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMapRTI,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="RTI rectangle"))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
mapsOnAgridCatch = function(dataset,catchType,fractionName,metierNum,scaleSpace,scaleTime,popNum,timeStep,scenames){
# catchMaps=explicitCatchMaps
# catchType="Explicit"
# scaleSpace="Node" #input$selmap.scale
# scaleTime="month"
# popNum=7
# timeStep=2# input$selmap.month
# metierNum=3 #metierNum
# scenames=c("A","B")
# fractionName="Landings"
# plotList=list()
# data2plot=NULL
if(scaleSpace=="Node") scaleSpace = "All"
if(scaleSpace=="RTI rectangle") scaleSpace = "RTI"
if(scaleSpace=="ICES rectangle") scaleSpace = "ICES"
plotList=list()
i=0
for(data2map in dataset){
if(scaleSpace=="All") data2plot = data2map$interimMap
if(scaleSpace=="ICES") data2plot = data2map$interimMapICES
if(scaleSpace=="RTI") data2plot = data2map$interimMapRTI
i=i+1
if(catchType=="Explicit"){
plotList[[i]]=as_grob(getExplicitCatchMap(data2plot,popNum,timeStep,metierNum,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
if(catchType=="Implicit"){
plotList[[i]]=as_grob(getImplicitCatchMap(data2plot,popNum,timeStep,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
if(catchType=="All"){
plotList[[i]]=as_grob(getAllCatchMap(data2plot,popNum,timeStep,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
output$cumulativeMap <- renderPlot({
# # scedir <- "data/CelticSea44/"
#  scedir <- ""
# # scenarios <- dir(scedir, "^sce[^_]*")
# # m <- regexpr("sce[^_]*", scenarios)
# # scenarios <- unique(regmatches(scenarios, m))
# first <- function(x) x[1]
# scenarios <- unique(sapply(strsplit(dir("output", ".*Rds"), split = "_"), first))
# outdir <- "output"
#
# makeCumulativeMap(scedir = scedir, outdir = outdir, scenarios = scenarios,a_type = input$sel.mapquantity, in_relative = FALSE)
plot2render = NULL
if(input$selmap.variable=="Effort"){
metierNum=input$selmap.metier
if(metierNum=="All") metierNum = NA
plot2render=mapsOnAgridEffort(effortMaps,scale=input$selmap.scale,metierNum,monthNum=input$selmap.month,attr(effortMaps,"names"))
}
if(input$selmap.variable=="Biomass"){
numOfPop=input$selmap.pop
plot2render=mapsOnAgridBiomass(biomassMaps,scale=input$selmap.scale,popNum=numOfPop,monthNum=input$selmap.month,attr(biomassMaps,"names"))
}
if(input$selmap.variable%in%c("Discards","Landings")){
metierNum=input$selmap.metier
numOfPop=input$selmap.pop
catchType=input$selmap.catchVariable
if(input$selmap.timescale=="month") timeStep = input$selmap.month
if(input$selmap.timescale=="year") timeStep = input$selmap.year-ybeg+1
if(catchType == "Explicit") plot2render=mapsOnAgridCatch(dataset=explicitCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
if(catchType == "Implicit") plot2render=mapsOnAgridCatch(dataset=implicitCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
if(catchType == "All") plot2render=mapsOnAgridCatch(dataset=allCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
}
plot2render
})
output$linePlot <- renderPlot({
req(input$sel.var, input$sel.sce)
par(mar = c(4, 5, 1, 1))
do_polygon_plot(
a_variable = input$sel.var,
ybeg = ybeg,
yend = yend,
documsum = input$quantCumSum,
a_set_of_scenarios = input$sel.sce,
the_scenario_names =names(selsce(popdynscenarios,scenames)),
selected = selected,
export = FALSE,
a_ylab = switch(input$sel.var,
gradva = "Accumulated Gross Value Added (million EUR)",
rev_from_av_prices = "Income from landings (million EUR)",
effort = "Effort",
nbtrip = "Number of trips",
totland = "Total landings",
""),
add_legend = TRUE,
color_legend = c(rgb(94/255,79/255,162/255,0.5), rgb(158/255,1/255,66/255,0.5), rgb(140/255,81/255,10/255,0.4),
rgb(1,0,0,0.5), rgb(0,0.5,1,0.5), rgb(0,1,0.5,0.5), rgb(1,0,0.5,0.5), rgb(0,0,0,0.2)),
a_width = 3500,
a_height = 1000
)
})
output$catchTimeSeriesPlot <- renderPlot({
## ColorBrewer: paired
##cols <- c("#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a")
## ColorBrewer: set3
##cols <- c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd")
cols <-  c('#7FC97F','#BEAED4','#FDC086','#FFFF99','#386CB0','#F0027F','#BF5B17','#666666','#1B9E77','#D95F02','#7570B3',
'#E7298A','#66A61E','#E6AB02','#A6761D','#666666','#A6CEE3','#1F78B4','#B2DF8A','#33A02C','#FB9A99','#E31A1C',
'#FDBF6F','#FF7F00','#CAB2D6','#6A3D9A','#FFFF99','#B15928','#FBB4AE','#B3CDE3','#CCEBC5','#DECBE4','#FED9A6',
'#FFFFCC','#E5D8BD','#FDDAEC','#F2F2F2','#B3E2CD','#FDCDAC','#CBD5E8','#F4CAE4','#E6F5C9','#FFF2AE','#F1E2CC',
'#CCCCCC','#E41A1C','#377EB8','#4DAF4A','#984EA3','#FF7F00','#FFFF33','#A65628','#F781BF','#999999','#66C2A5',
'#FC8D62','#8DA0CB','#E78AC3','#A6D854','#FFD92F','#E5C494','#B3B3B3','#8DD3C7','#FFFFB3','#BEBADA','#FB8072',
'#80B1D3','#FDB462','#B3DE69','#FCCDE5','#D9D9D9','#BC80BD','#CCEBC5','#FFED6F')
par(mar = c(6,4,3.5,0.9), xpd = TRUE)
#onesim <- lst_loglike_agg_weight_all_scebaseline[[1]]
add <- FALSE
for (s in input$sel.sce2) {
onesim <- get(paste0("lst_loglike_agg_weight_all_", s))[[1]]
onesim <- onesim[onesim$year.month != "NA.NA", ]
ym <- ym2date(onesim$year.month)
nms <- names(onesim)
selected <- onesim[, nms %in% input$sel.pop, drop = FALSE] / 1000
maxima <- apply(selected, 2, max)
limits <- c(0, 10, 100, 1000, Inf)
labels <- paste("Max catches: ", paste(limits[-5], limits[-1], sep = "-"), "tonnes")
labels[length(labels)] <- "Max catches: > 1000 tonnes"
lvls <- droplevels(cut(maxima, limits, include.lowest = TRUE,
labels = labels))
switch(length(levels(lvls)),
"1" = par(mfrow = c(1,1)),
"2" = par(mfrow = c(2,1)),
"3" = par(mfrow = c(2,2)),
"4" = par(mfrow = c(2,2)))
for (l in levels(lvls)) {
pops <- selected[, lvls == l, drop = FALSE]
nms <- as.vector(sapply(names(pops), function(x) popnames$spp[paste0("pop.", popnames$idx) == x]))
cls <- cols[as.integer(sub("pop.", "", names(pops))) + 1]
matplot(ym, pops,
type = "l", ylab = "Catch (tonnes)", xlab = "", add = add, lty = 1, lwd = 3,
col = cls)
mtext(l, line = 0.5, cex = 1.3)
legend("bottomleft", bty = "n", legend = nms, col = cls, inset = c(0, -0.8),
lty = 1, seg.len = 1, lwd = 3, box.col = "#00000022", ncol = 3, cex = 0.8)
}
}
})
output$fleetIndicatorsPlot <- renderPlot({
## par(mar = c(6,4,3.5,0.9), xpd = TRUE)
selOutcome=substr(selected,1,str_length(selected)-1)
outcomes <- get(paste0("relative_to_baseline_sce", selOutcome))
## CAUTION: (not the same levels when reading or when using directly the obj in the env)
# levels(outcomes$scenario) <-  c("sceavchok","sceavchokpszpctrastopifchok",
#                                "sceavchokpszpectra",
#                                "sceavhtariffspszpctratariffs",   "scebaseline",
#                                "scesizespectrastopifchok", "scetrgthtariffspszpctratariffs")
# add baseline at 0,0,0, etc.
baseline <- outcomes[outcomes$scenario == outcomes$scenario[1],]  # init
baseline$ratio_percent <-0
baseline$scenario <- "baseline"
outcomes <- rbind.data.frame(baseline, outcomes)
outcomes$scenario <- factor(outcomes$scenario)
selected_variables <- c("feffort", "seffort", "nbtrip", "av_trip_duration", "fishing_based_cpue_explicit","totland_explicit","sweptarea", "npv", "av_vpuf_month", "hoover")
outcomes           <- outcomes[outcomes$variable %in% selected_variables,]
outcomes$variable <- factor(outcomes$variable)
outcomes$variable <- factor(outcomes$variable, levels=selected_variables, labels= c( "F. effort", "S. effort", "Nb. of trips","Trip duration",  "CPUE at fishing","Tot landings","Swept Area","NPV", "VPUF", "Income inequality"))
selected_scenarios <- input$sel.sce2
nms <- names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) == input$sel.sce2]
outcomes <- outcomes[outcomes$scenario %in% selected_scenarios,]
#outcomes$scenario <- factor(outcomes$scenario)
outcomes$scenario <- factor(outcomes$scenario, levels=selected_scenarios, labels=  nms)
outcomes[outcomes$ratio_percent< -25, "ratio_percent"] <- -25
outcomes[outcomes$ratio_percent>25, "ratio_percent"] <- 25
p <- ggplot(outcomes[outcomes$ratio_percent>=-25 & outcomes$ratio_percent<=25,], aes(factor(variable), ratio_percent))  + geom_boxplot(outlier.shape=NA)  +
labs(x = "Indicators", y = "% ratio over the baseline") # + ylim(-20, 20)
p + facet_wrap( ~ scenario, ncol=2, scales="free_y")    + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), strip.text.x =element_text(size =10),  panel.grid.major = element_line(colour = grey(0.4),linetype =3 ),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"))  +
geom_abline(intercept=0, slope=0, color="grey", lty=2)
}, height = function() {((length(input$sel.sce2) + 1) %/% 2 ) * 300 })
output$populationSizePlot <- renderPlot({
req(input$sel.pop, input$sel.sce2, input$sel.sum.szgroups)
plot_popdyn(sces = input$sel.sce2,
scenarios_names= names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) %in% input$sel.sce2],
explicit_pops = input$sel.pop,
sum_all = input$sel.sum.szgroups)
}, height = function() {((length(input$sel.pop) + 1) %/% 2 ) * 300 })
# output$annualIndicPlot <- renderPlot({
#   req(input$sel.pop, input$sel.sce2, input$sel.indic)
#   plot_annualindic(sces = input$sel.sce2,
#                scenarios_names = names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) %in% input$sel.sce2],
#               explicit_pops = input$sel.pop,
#               indic = input$sel.indic)
# }, height = function() {length(input$sel.indic) * 150 + 150 })
output$barplot_landis_perpop <- renderPlot({
#warningPlot("Not implemented yet")
barplotTotLandingsPerSce(general=general,type_of_column="pop", selected="_all_",selected_scenarios = input$sel.sce2, scenarios_names = names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames)%in%input$sel.sce2],selected_pops = sub("pop.", "", input$sel.pop), firsty="2010", lasty="2012")
})
output$cumulativeMaps <- renderPlotly({
})
}
shinyApp(ui = ui, server = server, options = list("shiny.autoload.r" = FALSE))
stockNames = getStockNames() %>%
arrange(PopId)
metierNames = getMetierNames() %>%
arrange(metierId)
getStockNames = function(){
codes=read.table(file=paste(general$main.path.ibm, "/pop_names_CelticSea.txt",sep=""),header=T)
stockNames=read.table(file=paste(general$main.path.param,"/POPULATIONS/Stock_biological_traits.csv",sep=""),header=T,sep=",") %>%
select(c(stock,species)) %>%
rename(spp=stock) %>%
merge(codes,by=c("spp")) %>%
rename(PopId=idx)
}
getMetierNames = function(){
codes=read.table(file=paste(general$main.path.ibm, "/metiersspe_CelticSea/metier_names.dat",sep=""),header=T) %>%
rename(metierId=idx)
}
stockNames = getStockNames() %>%
arrange(PopId)
metierNames = getMetierNames() %>%
arrange(metierId)
shinyApp(ui = ui, server = server, options = list("shiny.autoload.r" = FALSE))
ls()
str(implicitCatchSpatial)
str(explicitCatchSpatial)
str(allCatchSpatial)
server <- function(input, output) {
output$speciesTable <- renderTable(read.csv(paste(outputLocation,"/species.csv",sep="")))
output$gearTable <- renderTable({
tbl <- read.csv(paste(outputLocation,"/gears.csv",sep=""))
names(tbl) <- c("Gear", "Code")
tbl
})
mapsOnAgridEffort = function(effortMaps,scale,metierNum,monthNum,scenames){
# scale="Node" #input$selmap.scale
# monthNum=2# input$selmap.month
# metierNum=NA #metierNum
# scenames=c("A","B")
plotList=list()
i=0
for(dataset in effortMaps){
i=i+1
if(scale=="Node"){
plotList[[i]]=as_grob(getmapEffortNodeAll(dataset$VesselVmsLikeCond,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
if(scale=="ICES rectangle"){
plotList[[i]]=as_grob(getmapEffortICESAll(dataset$polygonsICES,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
if(scale=="RTI rectangle"){
plotList[[i]]=as_grob(getmapEffortRTIAll(dataset$polygonsRTI,gif=FALSE,idMetier=metierNum,monthNum,scenames[i]))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
mapsOnAgridBiomass = function(biomassMaps,scale,popNum,monthNum,scenames){
# scale="Node" #input$selmap.scale
# monthNum=2# input$selmap.month
# metierNum=NA #metierNum
# scenames=c("A","B")
plotList=list()
i=0
for(dataset in biomassMaps){
i=i+1
if(scale=="Node"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMap,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="Node"))
}
if(scale=="ICES rectangle"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMapICES,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="ICES rectangle"))
}
if(scale=="RTI rectangle"){
plotList[[i]]=as_grob(getBiomassMapNode(dataset$interimMapRTI,popNum,timeStep=monthNum,gif=F,scename=scenames[i],scale="RTI rectangle"))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
mapsOnAgridCatch = function(dataset,catchType,fractionName,metierNum,scaleSpace,scaleTime,popNum,timeStep,scenames){
# catchMaps=explicitCatchMaps
# catchType="Explicit"
# scaleSpace="Node" #input$selmap.scale
# scaleTime="month"
# popNum=7
# timeStep=2# input$selmap.month
# metierNum=3 #metierNum
# scenames=c("A","B")
# fractionName="Landings"
# plotList=list()
# data2plot=NULL
if(scaleSpace=="Node") scaleSpace = "All"
if(scaleSpace=="RTI rectangle") scaleSpace = "RTI"
if(scaleSpace=="ICES rectangle") scaleSpace = "ICES"
if (scaleTime=="year" & catchType=="Explicit") timeStep = timeStep +ybeg -1
plotList=list()
i=0
for(data2map in dataset){
if(scaleSpace=="All") data2plot = data2map$interimMap
if(scaleSpace=="ICES") data2plot = data2map$interimMapICES
if(scaleSpace=="RTI") data2plot = data2map$interimMapRTI
i=i+1
if(catchType=="Explicit"){
plotList[[i]]=as_grob(getExplicitCatchMap(data2plot,popNum,timeStep,metierNum,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
if(catchType=="Implicit"){
plotList[[i]]=as_grob(getImplicitCatchMap(data2plot,popNum,timeStep,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
if(catchType=="All"){
plotList[[i]]=as_grob(getAllCatchMap(data2plot,popNum,timeStep,fractionName,sce=scenames[i],scaleTime,resScale=scaleSpace,gif=F))
}
}
numCols = 4
if(length(plotList)<4) numCols = length(plotList)
return(grid.arrange(grobs=plotList,ncol=numCols))
}
output$cumulativeMap <- renderPlot({
# # scedir <- "data/CelticSea44/"
#  scedir <- ""
# # scenarios <- dir(scedir, "^sce[^_]*")
# # m <- regexpr("sce[^_]*", scenarios)
# # scenarios <- unique(regmatches(scenarios, m))
# first <- function(x) x[1]
# scenarios <- unique(sapply(strsplit(dir("output", ".*Rds"), split = "_"), first))
# outdir <- "output"
#
# makeCumulativeMap(scedir = scedir, outdir = outdir, scenarios = scenarios,a_type = input$sel.mapquantity, in_relative = FALSE)
plot2render = NULL
if(input$selmap.variable=="Effort"){
metierNum=input$selmap.metier
if(metierNum=="All") metierNum = NA
plot2render=mapsOnAgridEffort(effortMaps,scale=input$selmap.scale,metierNum,monthNum=input$selmap.month,attr(effortMaps,"names"))
}
if(input$selmap.variable=="Biomass"){
numOfPop=input$selmap.pop
plot2render=mapsOnAgridBiomass(biomassMaps,scale=input$selmap.scale,popNum=numOfPop,monthNum=input$selmap.month,attr(biomassMaps,"names"))
}
if(input$selmap.variable%in%c("Discards","Landings")){
metierNum=input$selmap.metier
numOfPop=input$selmap.pop
catchType=input$selmap.catchVariable
if(input$selmap.timescale=="month") timeStep = input$selmap.month
if(input$selmap.timescale=="year") timeStep = input$selmap.year-ybeg+1
if(catchType == "Explicit") plot2render=mapsOnAgridCatch(dataset=explicitCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
if(catchType == "Implicit") plot2render=mapsOnAgridCatch(dataset=implicitCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
if(catchType == "All") plot2render=mapsOnAgridCatch(dataset=allCatchMaps,catchType,fractionName=input$selmap.variable,metierNum,scaleSpace=input$selmap.scale,scaleTime=input$selmap.timescale,popNum=numOfPop,timeStep,attr(biomassMaps,"names"))
}
plot2render
})
output$linePlot <- renderPlot({
req(input$sel.var, input$sel.sce)
par(mar = c(4, 5, 1, 1))
do_polygon_plot(
a_variable = input$sel.var,
ybeg = ybeg,
yend = yend,
documsum = input$quantCumSum,
a_set_of_scenarios = input$sel.sce,
the_scenario_names =names(selsce(popdynscenarios,scenames)),
selected = selected,
export = FALSE,
a_ylab = switch(input$sel.var,
gradva = "Accumulated Gross Value Added (million EUR)",
rev_from_av_prices = "Income from landings (million EUR)",
effort = "Effort",
nbtrip = "Number of trips",
totland = "Total landings",
""),
add_legend = TRUE,
color_legend = c(rgb(94/255,79/255,162/255,0.5), rgb(158/255,1/255,66/255,0.5), rgb(140/255,81/255,10/255,0.4),
rgb(1,0,0,0.5), rgb(0,0.5,1,0.5), rgb(0,1,0.5,0.5), rgb(1,0,0.5,0.5), rgb(0,0,0,0.2)),
a_width = 3500,
a_height = 1000
)
})
output$catchTimeSeriesPlot <- renderPlot({
## ColorBrewer: paired
##cols <- c("#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a")
## ColorBrewer: set3
##cols <- c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd")
cols <-  c('#7FC97F','#BEAED4','#FDC086','#FFFF99','#386CB0','#F0027F','#BF5B17','#666666','#1B9E77','#D95F02','#7570B3',
'#E7298A','#66A61E','#E6AB02','#A6761D','#666666','#A6CEE3','#1F78B4','#B2DF8A','#33A02C','#FB9A99','#E31A1C',
'#FDBF6F','#FF7F00','#CAB2D6','#6A3D9A','#FFFF99','#B15928','#FBB4AE','#B3CDE3','#CCEBC5','#DECBE4','#FED9A6',
'#FFFFCC','#E5D8BD','#FDDAEC','#F2F2F2','#B3E2CD','#FDCDAC','#CBD5E8','#F4CAE4','#E6F5C9','#FFF2AE','#F1E2CC',
'#CCCCCC','#E41A1C','#377EB8','#4DAF4A','#984EA3','#FF7F00','#FFFF33','#A65628','#F781BF','#999999','#66C2A5',
'#FC8D62','#8DA0CB','#E78AC3','#A6D854','#FFD92F','#E5C494','#B3B3B3','#8DD3C7','#FFFFB3','#BEBADA','#FB8072',
'#80B1D3','#FDB462','#B3DE69','#FCCDE5','#D9D9D9','#BC80BD','#CCEBC5','#FFED6F')
par(mar = c(6,4,3.5,0.9), xpd = TRUE)
#onesim <- lst_loglike_agg_weight_all_scebaseline[[1]]
add <- FALSE
for (s in input$sel.sce2) {
onesim <- get(paste0("lst_loglike_agg_weight_all_", s))[[1]]
onesim <- onesim[onesim$year.month != "NA.NA", ]
ym <- ym2date(onesim$year.month)
nms <- names(onesim)
selected <- onesim[, nms %in% input$sel.pop, drop = FALSE] / 1000
maxima <- apply(selected, 2, max)
limits <- c(0, 10, 100, 1000, Inf)
labels <- paste("Max catches: ", paste(limits[-5], limits[-1], sep = "-"), "tonnes")
labels[length(labels)] <- "Max catches: > 1000 tonnes"
lvls <- droplevels(cut(maxima, limits, include.lowest = TRUE,
labels = labels))
switch(length(levels(lvls)),
"1" = par(mfrow = c(1,1)),
"2" = par(mfrow = c(2,1)),
"3" = par(mfrow = c(2,2)),
"4" = par(mfrow = c(2,2)))
for (l in levels(lvls)) {
pops <- selected[, lvls == l, drop = FALSE]
nms <- as.vector(sapply(names(pops), function(x) popnames$spp[paste0("pop.", popnames$idx) == x]))
cls <- cols[as.integer(sub("pop.", "", names(pops))) + 1]
matplot(ym, pops,
type = "l", ylab = "Catch (tonnes)", xlab = "", add = add, lty = 1, lwd = 3,
col = cls)
mtext(l, line = 0.5, cex = 1.3)
legend("bottomleft", bty = "n", legend = nms, col = cls, inset = c(0, -0.8),
lty = 1, seg.len = 1, lwd = 3, box.col = "#00000022", ncol = 3, cex = 0.8)
}
}
})
output$fleetIndicatorsPlot <- renderPlot({
## par(mar = c(6,4,3.5,0.9), xpd = TRUE)
selOutcome=substr(selected,1,str_length(selected)-1)
outcomes <- get(paste0("relative_to_baseline_sce", selOutcome))
## CAUTION: (not the same levels when reading or when using directly the obj in the env)
# levels(outcomes$scenario) <-  c("sceavchok","sceavchokpszpctrastopifchok",
#                                "sceavchokpszpectra",
#                                "sceavhtariffspszpctratariffs",   "scebaseline",
#                                "scesizespectrastopifchok", "scetrgthtariffspszpctratariffs")
# add baseline at 0,0,0, etc.
baseline <- outcomes[outcomes$scenario == outcomes$scenario[1],]  # init
baseline$ratio_percent <-0
baseline$scenario <- "baseline"
outcomes <- rbind.data.frame(baseline, outcomes)
outcomes$scenario <- factor(outcomes$scenario)
selected_variables <- c("feffort", "seffort", "nbtrip", "av_trip_duration", "fishing_based_cpue_explicit","totland_explicit","sweptarea", "npv", "av_vpuf_month", "hoover")
outcomes           <- outcomes[outcomes$variable %in% selected_variables,]
outcomes$variable <- factor(outcomes$variable)
outcomes$variable <- factor(outcomes$variable, levels=selected_variables, labels= c( "F. effort", "S. effort", "Nb. of trips","Trip duration",  "CPUE at fishing","Tot landings","Swept Area","NPV", "VPUF", "Income inequality"))
selected_scenarios <- input$sel.sce2
nms <- names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) == input$sel.sce2]
outcomes <- outcomes[outcomes$scenario %in% selected_scenarios,]
#outcomes$scenario <- factor(outcomes$scenario)
outcomes$scenario <- factor(outcomes$scenario, levels=selected_scenarios, labels=  nms)
outcomes[outcomes$ratio_percent< -25, "ratio_percent"] <- -25
outcomes[outcomes$ratio_percent>25, "ratio_percent"] <- 25
p <- ggplot(outcomes[outcomes$ratio_percent>=-25 & outcomes$ratio_percent<=25,], aes(factor(variable), ratio_percent))  + geom_boxplot(outlier.shape=NA)  +
labs(x = "Indicators", y = "% ratio over the baseline") # + ylim(-20, 20)
p + facet_wrap( ~ scenario, ncol=2, scales="free_y")    + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), strip.text.x =element_text(size =10),  panel.grid.major = element_line(colour = grey(0.4),linetype =3 ),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"))  +
geom_abline(intercept=0, slope=0, color="grey", lty=2)
}, height = function() {((length(input$sel.sce2) + 1) %/% 2 ) * 300 })
output$populationSizePlot <- renderPlot({
req(input$sel.pop, input$sel.sce2, input$sel.sum.szgroups)
plot_popdyn(sces = input$sel.sce2,
scenarios_names= names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) %in% input$sel.sce2],
explicit_pops = input$sel.pop,
sum_all = input$sel.sum.szgroups)
}, height = function() {((length(input$sel.pop) + 1) %/% 2 ) * 300 })
# output$annualIndicPlot <- renderPlot({
#   req(input$sel.pop, input$sel.sce2, input$sel.indic)
#   plot_annualindic(sces = input$sel.sce2,
#                scenarios_names = names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames) %in% input$sel.sce2],
#               explicit_pops = input$sel.pop,
#               indic = input$sel.indic)
# }, height = function() {length(input$sel.indic) * 150 + 150 })
output$barplot_landis_perpop <- renderPlot({
#warningPlot("Not implemented yet")
barplotTotLandingsPerSce(general=general,type_of_column="pop", selected="_all_",selected_scenarios = input$sel.sce2, scenarios_names = names(selsce(popdynscenarios,scenames))[selsce(popdynscenarios,scenames)%in%input$sel.sce2],selected_pops = sub("pop.", "", input$sel.pop), firsty="2010", lasty="2012")
})
output$cumulativeMaps <- renderPlotly({
})
}
shinyApp(ui = ui, server = server, options = list("shiny.autoload.r" = FALSE))
